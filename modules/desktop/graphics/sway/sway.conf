### Variables
#

# Logo key. Use Mod1 for Alt and Mod4 for Super.
set $mod Mod1
set $alt_mod Mod4

# Direction keys
set $left Left
set $down Down
set $up Up
set $right Right

# Alternative direction keys
set $left_alt h
set $down_alt j
set $up_alt k
set $right_alt l

# Add --to-code to bindsym, support for non-latin layouts
# For user's convenience, the same for unbindsym
set $bindsym bindsym --to-code
set $unbindsym unbindsym --to-code

# Your preferred terminal emulator
set $term terminator
set $term_cwd $term --working-directory="$(swaycwd 2>/dev/null || printf '%s' "$HOME")"

# Onscreen bar
set $onscreen_bar wob-onscreen-bar "$accent-color" "$background-color"

# Waybar
#set $waybar waybar --config /etc/xdg/waybar/config --style /etc/xdg/waybar/style.css

# Brightness control
set $disp_backlight brightnessctl -d "intel_backlight"
set $kbd_backlight brightnessctl -d "dell::kbd_backlight"

set $brightness_up exec $disp_backlight set 5%+ | $onscreen_bar
set $brightness_down exec $disp_backlight set 5%- | $onscreen_bar
set $kbd_brightness_up exec $kbd_backlight set 5%+ | $onscreen_bar
set $kbd_brightness_down exec $kbd_backlight set 5%- | $onscreen_bar

# Display scaling
set $scale_up display-scale up
set $scale_down display-scale down
set $scale_default display-scale default

# Audio control
set $sink_volume wpctl get-volume \@DEFAULT_SINK@ | grep -E '^Volume:' | awk '{if ($0 ~ /[MUTED]/) {print 0} else {sub(/Volume:\s*/,""); print ($1*100)}}'
set $source_volume wpctl get-volume \@DEFAULT_SOURCE@ | grep -E '^Volume:' | awk '{if ($0 ~ /[MUTED]/) {print 0} else {sub(/Volume:\s*/,""); print ($1*100)}}'
set $volume_down $onscreen_bar $(wpctl set-volume \@DEFAULT_SINK@ 5%- && $sink_volume)
set $volume_up $onscreen_bar $(wpctl set-volume \@DEFAULT_SINK@ 5%+ && $sink_volume)
set $volume_mute $onscreen_bar $(wpctl set-mute \@DEFAULT_SINK@ toggle && $sink_volume)
set $mic_mute $onscreen_bar $(wpctl set-mute \@DEFAULT_SOURCE@ toggle && $source_volume)

# Clipboard history
set $clipboard clipman pick -t rofi -T "-config /etc/rofi/dmenu.rasi -dmenu -p 'Select item to copy' -lines 10"
set $clipboard_delete clipman clear -t rofi -T "-config /etc/rofi/dmenu.rasi -dmenu -p 'Select item to copy' -lines 10"

# Application launcher
set $menu rofi -config /etc/rofi/menu.rasi -show drun

# Power menu
#set $powermenu wlogout --layout /etc/wlogout/layout --css /etc/wlogout/style.css
set $powermenu wlogout

# Lockscreen configuration
set $locking swaylock --daemonize \
    --color "$selection-color" \
    --inside-color "$selection-color" \
    --inside-clear-color "$text-color" \
    --ring-color "$color2" \
    --ring-clear-color "$color11" \
    --ring-ver-color "$color13" \
    --show-failed-attempts \
    --fade-in 0.2 \
    --grace 2 \
    --effect-vignette 0.5:0.5 \
    --effect-blur 7x5 \
    --screenshots \
    --clock

### Idle configuration
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
set $idle_timeout 240
set $locking_timeout 300
set $screen_timeout 600
set $sleep_timeout_bat 900
set $sleep_timeout_ac 3600
set $sleep_delay 2

# Hide cursor after 5 seconds of inactivity
seat * hide_cursor 5000

# Workspace names
set $ws1 number 1
set $ws2 number 2
set $ws3 number 3
set $ws4 number 4
set $ws5 number 5
set $ws6 number 6
set $ws7 number 7
set $ws8 number 8
set $ws9 number 9
set $ws10 number 10

# Screenshot commands
set $notify_paste [[ $(wl-paste -l) == "image/png" ]] && notify-send "Screenshot copied to clipboard"
set $screenshot_screen grimshot --notify savecopy output /tmp/$(date +'%H:%M:%S.png')
set $screenshot_selection grimshot --notify savecopy area /tmp/$(date +'%H:%M:%S.png')

## Autostarts
set $kanshi 'pkill -x kanshi; exec kanshi'
#set $xdg-dirs '[ -x "$(command -v xdg-user-dirs-update)" ] && exec xdg-user-dirs-update'

set $swayidle swayidle -w \
    timeout $idle_timeout 'brightnessctl -s && $disp_backlight set 25%' \
    resume 'brightnessctl -r' \
    timeout $locking_timeout 'exec $locking' \
    timeout $screen_timeout '$kbd_backlight set 0 && swaymsg "output * dpms off"' \
    resume '$kbd_backlight -r && swaymsg "output * dpms on"' \
    timeout $sleep_timeout_bat '[ "$(acpi -b | grep Discharging)" != "" ] && systemctl suspend' \
    timeout $sleep_timeout_ac '[ "$(acpi -b | grep Discharging)" = "" ] && systemctl suspend' \
    before-sleep 'playerctl pause' \
    before-sleep 'exec $locking & sleep $sleep_delay' \
    after-resume '$kbd_backlight set 0 && swaymsg "output * dpms on" && brightnessctl -r'

## Daemons
set $mako 'pkill -x mako; mako --font "Hack 12" --text-color "$text-color" --border-color "$accent-color" --background-color "$background-color" --border-size 3 --width 400 --height 200 --padding 20 --margin 20 --default-timeout 15000'
set $cliphist_watch 'wl-paste --watch waybar-signal clipboard'
set $cliphist_store 'wl-paste -t text --watch clipman store'


bindswitch --locked lid:off output eDP-1 dpms off, exec $kbd_backlight set 0
bindswitch --locked lid:on output eDP-1 dpms on, exec $$kbd_backlight -r


### Key bindings

## Launch // Terminal ##
$bindsym $mod+Return exec $term_cwd
$bindsym $mod+Shift+Return exec $term

## Action // Kill focused window ##
$bindsym $mod+Shift+q kill

## Launch // Open launcher ##
$bindsym $mod+d exec $menu
$bindsym $alt_mod+space exec $menu

## Launch // Power menu ##
$bindsym $mod+shift+e exec $powermenu

## Launch // Open clipboard ##
$bindsym $mod+Shift+p exec $clipboard

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

## Action // Reload Sway Configuration ##
$bindsym $mod+Shift+c reload

# Exit sway (logs you out of your Wayland session)
#$bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'

## Navigation // Move focus // $mod + ↑ ↓ ← → ##
$bindsym $mod+$left focus left
$bindsym $mod+$down focus down
$bindsym $mod+$up focus up
$bindsym $mod+$right focus right

$bindsym $mod+$left_alt focus left
$bindsym $mod+$down_alt focus down
$bindsym $mod+$up_alt focus up
$bindsym $mod+$right_alt focus right

## Navigation // Move focused window // $mod + Shift + ↑ ↓ ← → ##
$bindsym $mod+Shift+$left move left
$bindsym $mod+Shift+$down move down
$bindsym $mod+Shift+$up move up
$bindsym $mod+Shift+$right move right

$bindsym $mod+Shift+$left_alt move left
$bindsym $mod+Shift+$down_alt move down
$bindsym $mod+Shift+$up_alt move up
$bindsym $mod+Shift+$right_alt move right

## Navigation // Switch workspace // $mod + [number] ##
$bindsym $mod+1 workspace $ws1
$bindsym $mod+2 workspace $ws2
$bindsym $mod+3 workspace $ws3
$bindsym $mod+4 workspace $ws4
$bindsym $mod+5 workspace $ws5
$bindsym $mod+6 workspace $ws6
$bindsym $mod+7 workspace $ws7
$bindsym $mod+8 workspace $ws8
$bindsym $mod+9 workspace $ws9
$bindsym $mod+0 workspace $ws10

set $focus_ws [ "$focus_after_move" == 'true' ] && swaymsg workspace

## Action // Move focused window to workspace // $mod + Shift + [number] ##
$bindsym $mod+Shift+1 move container to workspace $ws1, exec $focus_ws $ws1
$bindsym $mod+Shift+2 move container to workspace $ws2, exec $focus_ws $ws2
$bindsym $mod+Shift+3 move container to workspace $ws3, exec $focus_ws $ws3
$bindsym $mod+Shift+4 move container to workspace $ws4, exec $focus_ws $ws4
$bindsym $mod+Shift+5 move container to workspace $ws5, exec $focus_ws $ws5
$bindsym $mod+Shift+6 move container to workspace $ws6, exec $focus_ws $ws6
$bindsym $mod+Shift+7 move container to workspace $ws7, exec $focus_ws $ws7
$bindsym $mod+Shift+8 move container to workspace $ws8, exec $focus_ws $ws8
$bindsym $mod+Shift+9 move container to workspace $ws9, exec $focus_ws $ws9
$bindsym $mod+Shift+0 move container to workspace $ws10, exec $focus_ws $ws10

## Setting // Split windows ##
$bindsym $mod+b splith
$bindsym $mod+v splitv

## Action // Switch window layout ##
$bindsym $mod+s layout stacking
$bindsym $mod+w layout tabbed
$bindsym $mod+e layout toggle split

## Action // Toggle fullscreen ##
$bindsym $mod+f fullscreen
$bindsym $mod+Shift+f fullscreen global

## Action // Scale ##
$bindsym $alt_mod+plus exec $scale_up
$bindsym $alt_mod+minus exec $scale_down
$bindsym $mod+equal exec $scale_default

## Action // Toggle floating ##
$bindsym $mod+Shift+space floating toggle

## Navigation // Toggle focus between tiling and floating ##
$bindsym $mod+space focus mode_toggle

## Navigation // Swap focus to the parent window ##
$bindsym $mod+a focus parent

default_border pixel 1
hide_edge_borders smart

# Allow to kill focused floating shell windows using Esc
$bindsym --release Escape [app_id="floating_shell" con_id=__focused__] kill

# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

## Action // Move window to scratchpad ##
$bindsym $mod+Shift+minus move scratchpad, exec "waybar-signal scratchpad"

# If there are multiple scratchpad windows, this command cycles through them.
## Action // Toggle scratchpad ##
$bindsym $mod+minus scratchpad show, exec "waybar-signal scratchpad"

## Multimedia keys
# --locked flags allow the buttons to be used whilst the screen is locked.
$bindsym --locked XF86AudioRaiseVolume exec $volume_up
$bindsym --locked XF86AudioLowerVolume exec $volume_down
$bindsym --locked XF86AudioMute exec $volume_mute
$bindsym XF86AudioMicMute exec $mic_mute

## Media player controls
$bindsym --locked XF86AudioPlay exec playerctl play-pause
$bindsym --locked XF86AudioNext exec playerctl next
$bindsym --locked XF86AudioPrev exec playerctl previous

## Display brightness
$bindsym --locked XF86MonBrightnessUp exec $brightness_up
$bindsym --locked XF86MonBrightnessDown exec $brightness_down

## Miscellaneous keys
$bindsym XF86Search exec $menu
$bindsym XF86PowerOff exec $shutdown
$bindsym XF86TouchpadToggle input type:touchpad events toggle enabled disabled

## Resizing containers:
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    $bindsym $left resize shrink width 10px
    $bindsym $down resize grow height 10px
    $bindsym $up resize shrink height 10px
    $bindsym $right resize grow width 10px

    $bindsym $left_alt resize shrink width 10px
    $bindsym $down_alt resize grow height 10px
    $bindsym $up_alt resize shrink height 10px
    $bindsym $right_alt resize grow width 10px

    $bindsym Shift+$left resize shrink width 50px
    $bindsym Shift+$down resize grow height 50px
    $bindsym Shift+$up resize shrink height 50px
    $bindsym Shift+$right resize grow width 50px

    $bindsym Shift+$left_alt resize shrink width 50px
    $bindsym Shift+$down_alt resize grow height 50px
    $bindsym Shift+$up_alt resize shrink height 50px
    $bindsym Shift+$right_alt resize grow width 50px

    ## Resize // Window Gaps // + - ##
    $bindsym minus gaps inner current minus 5px
    $bindsym plus gaps inner current plus 5px

    # Return to default mode
    $bindsym Return mode "default"
    $bindsym Escape mode "default"
}
## Launch // Resize Mode ##
$bindsym $mod+r mode "resize"

## Screenshots:
mode "screenshot" {
    # Currently active output
    $bindsym o mode "default", exec $screenshot_screen
    $bindsym Shift+o mode "default", exec $screenshot_screen

    # Pick the region to screenshot
    $bindsym p mode "default", exec $screenshot_selection
    $bindsym Shift+p mode "default", exec $screenshot_selection

    # Return to default mode.
    $bindsym Escape mode "default"
}
## Launch // Screenshot Mode ##
$bindsym Print mode "screenshot"

input type:touchpad {
    dwt enabled
    tap enabled
    natural_scroll enabled
}

input "3823:49156:EETI8082:00_0EEF:C004" {
    map_to_output eDP-1
}

input type:keyboard {
    xkb_layout "fi,us"
    xkb_options "grp:win_space_toggle"
}

bar {
    position top
    swaybar_command waybar
	#swaybar_command waybar --config /etc/xdg/waybar/config --style /etc/xdg/waybar/style.css
}

include /etc/sway/theme.conf
include /etc/sway/config.d/*

exec {
    update-sway-session-env
    configure-gtk
    $swayidle
    $cliphist_store
    $cliphist_watch
}

exec_always {
    lisgd
    $kanshi
    $mako
    $onscreen_bar --refresh
}
